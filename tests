-------Tell-------
Logic Chatbot
Type 'exit' to quit
> tell: p implies q
I've learned something new
> tell: p implies q
I already know that
> tell: p
I've learned something new
> tell: not p
I do not believe that
> exit
Goodbye!

-------Ask-------
Logic Chatbot
Type 'exit' to quit
> tell: p implies q
I've learned something new
> tell: p
I've learned something new
> ask: q
Yes
> ask: not p
No
> ask: r
I do not know
> exit
Goodbye!

-------list_kb-------
Logic Chatbot
Type 'exit' to quit
> list_kb
Knowledge base is empty.
> tell: p implies q
I've learned something new
> tell: p
I've learned something new
> list_kb
1. p => q
2. p
> exit
Goodbye!


-------modus_ponens-------
$ python main.py
Logic Chatbot
Type 'exit' to quit
> tell: p implies q
I've learned something new
> modus_ponens: p; p implies q
applied modus ponens and learned: q
> list_kb
1. p => q
3. q
> modus_ponens: r; p implies q
Error: premise r does not match implication antecedent p.
> modus_ponens: p; p and q
Error: second argument must be an implication.
> exit
Goodbye!

-------resolution-------
$ python main.py
Logic Chatbot
Type 'exit' to quit
> tell: p or r
I've learned something new
> tell: not p or s
I've learned something new
> resolution: p or r; not p or s
applied resolution and learned: r | s
> list_kb
1. p | r
2. ~p | s
3. r | s
> resolution: p or q; r or s
No complementary literals found; resolution not applicable.
> tell: p
I've learned something new
> tell: not p
I do not believe that
> resolution: p; not p
applied resolution and learned: False
> list_kb
1. p | r
2. s | ~p
3. r | s
4. p
5. False
> exit
Goodbye!

-------to_cnf-------
$ python main.py
Logic Chatbot
Type 'exit' to quit
> to_cnf: p implies (q and r)
original formula : p => ( q & r )
converted to CNF : ( q | ~p ) & ( r | ~p )
> to_cnf: (p or q) implies (r and s)
original formula : p | q => ( r & s )
converted to CNF : ( r | ~p ) & ( r | ~q ) & ( s | ~p ) & ( s | ~q )
> to_cnf: p iff q
original formula : p <=> q
converted to CNF : ( p | ~q ) & ( q | ~p )
> to_cnf: not (p and (q or not r))
original formula : ~p & ( q | ~r )
converted to CNF : ( r | ~p ) & ( ~p | ~q )
> exit
Goodbye!